name: Deploy to GitHub Pages

# Add permissions at the top level
permissions:
  contents: read
  pages: write
  id-token: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify lock file
        run: |
          if [ ! -f pnpm-lock.yaml ]; then
            echo "::error::pnpm-lock.yaml not found! Commit your lock file first."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          CI: true

      # Lint step commented out - uncomment when you have a lint script in package.json
      # - name: Lint code
      #   run: pnpm run lint

      # Test step commented out - uncomment when you have a test script in package.json  
      # - name: Run tests
      #   run: pnpm test

      - name: Check for build script
        id: check-build-script
        shell: bash
        run: |
          if grep -q '"build":' package.json; then
            echo "build_script_exists=true" >> $GITHUB_OUTPUT
          else
            echo "build_script_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::No build script found in package.json. Using default Vite build command."
          fi

      - name: Build production with package.json script
        if: steps.check-build-script.outputs.build_script_exists == 'true'
        run: pnpm run build
        env:
          VITE_APP_VERSION: ${{ github.sha }}

      - name: Build production with direct Vite command
        if: steps.check-build-script.outputs.build_script_exists == 'false'
        run: pnpm exec vite build
        env:
          VITE_APP_VERSION: ${{ github.sha }}

      - name: Check if dist directory exists
        id: check-dist
        shell: bash
        run: |
          if [ -d "dist" ]; then
            echo "dist_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dist_exists=false" >> $GITHUB_OUTPUT
            echo "::error::No 'dist' directory found after build. Please check your build configuration."
            exit 1
          fi

      - name: Upload artifact
        if: steps.check-dist.outputs.dist_exists == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy:
    name: Deploy to GitHub Pages
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # These permissions are now redundant since we defined them at the top level
    # but keeping them for clarity
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
